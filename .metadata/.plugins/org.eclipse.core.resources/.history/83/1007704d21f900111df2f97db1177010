package nl.dennisg.base.driver;

import java.io.File;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

import org.apache.felix.dm.Component;
import org.apache.felix.dm.DependencyManager;
import org.apache.felix.dm.ServiceDependency;
import org.osgi.framework.ServiceReference;
import org.osgi.service.device.Constants;
import org.osgi.service.log.LogService;

public class BaseDriver implements Callable<Void> {

	
	private volatile DependencyManager m_manager;
	private volatile LogService m_log;
	private volatile ServiceReference m_ref;
	
	private ScheduledExecutorService m_executor;
	
	private File m_root = new File("devices");
	private Map<File, Component> m_files;
	
	@SuppressWarnings("unused")
	private void start() {
		m_executor = Executors.newSingleThreadScheduledExecutor();
		m_executor.submit(this);
		m_log.log(LogService.LOG_INFO, String.format("Base driver has started: it is checking: %s", m_root));
		m_root.mkdirs();
	}
	
	@SuppressWarnings("unused")
	private void stop() {
		m_executor.shutdownNow();
	}
	
	private void safeCall() {
		File[] files = m_root.listFiles();
		for (File file : files) {
			if (m_files.keySet().contains(file)) continue;
			Component cmp = registerDevice(file);
			m_files.put(file, cmp);
		}
		checkMissing();
	}
	
	@Override
	public Void call() throws Exception {
		try { safeCall(); } catch (Exception e) {}
		return null;
	}
	
	private Component registerDevice(final File f) {
		
		Properties p = new Properties() {{
			put(Constants.DEVICE_CATEGORY, "file");
			put(Constants.DEVICE_DESCRIPTION, "a filesystem file");
			put(Constants.DEVICE_SERIAL, f.getName());
		}};
		
		add(createComponent()
				.setImplementation(f).setInterface(File.class.getName(), p)
				.add(
				createServiceDependency().setService(Object.class, m_ref).setRequired(true)
				);
	}
	
	
	private void checkMissing() {
		
	}
	
	private void add(Component cmp) {
		m_manager.add(cmp);
	}
	
	private Component createComponent() {
		return m_manager.createComponent();
	}
	
	private ServiceDependency createServiceDependency() {
		return m_manager.createServiceDependency();
	}
}
